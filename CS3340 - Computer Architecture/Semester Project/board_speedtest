	.data
filename:	.asciiz	"data_backup.txt"
newline:	.asciiz "\n"
one:		.asciiz "1"
zero:		.asciiz "0"
buffer:		.space 2

		.align	2
red:		.word	0xFFDC143C
yellow:		.word	0xFFFFFF66
purple:		.word	0xFF800080
green:		.word	0xFF006400
white:		.word	0xFFF0FFFF

startAddress:   .word 	0x10010000

	.text
pre_load:
	# Sets the Accumulators to 0 :: 
	# Gryffindor House Accumulator -> $s1
	# Hufflepuff House Accumulator -> $s2
	# Ravenclaw House Accumulator -> $s3
	# Slytherin House Accumulator -> $s4
	li $s1, 0 
	li $s2, 0
	li $s3, 0
	li $s4, 0

	# $t8 is the file iterator, used to parse through the file
	# $t9 is the max number of lines possible in the file 
	li $t8, 0
	li $t9, 700

	# Syscall to open the file, then move the filepointer from $v0, to $s0
	li $v0, 13
	la $a0, filename
	li $a1, 0
	li $a2, 0
	syscall
	
	move $s0, $v0

# 'read'::
#	- Opens the file 'data.txt'
#	- Parses throught the file with 'buffer' and the iterators previously defined
#	- Checs for issues / looping position, and moves on the graph editing if there exists a problem OR if done with file reading
#	- Calls PROCESS to process data after each line read
#	- Continues to call read (in a loop) unitl end requirements are met
read:

	# Resets Registers
	add $a0, $zero, $zero
	add $a1, $zero, $zero

	# Read File Syscall
	li $v0, 14
	move $a0, $s0
	la $a1, buffer
	li $a2, 6
	syscall
	
	# Checks for issues / loops position
	bltz $v0, exit
	
	jal proc	
	bge $t8, $t9, exit
	
	# Adds to the accumulators
	addi $t8, $t8, 1
	j read

# 'proc':
#	- Loads the line into $a1
#	- Calculates and normalizes score for:
#		- Gryffindor House
#		- Hufflepuff House
#		- Ravenclaw House
#		- Slytherin House
#	- Returns updated values to previous function	
proc:
	# Loads the line into $a1
	la $a1, buffer
	
	# Gryffindor House	
	lb $a0, 0($a1)	
	subi $a0, $a0, 48
	add $s1, $s1, $a0	
	
	# Hufflepuff House?
	lb $a0, 1($a1)	
	subi $a0, $a0, 48
	add $s2, $s2, $a0
	
	# Ravenclaw House?
	lb $a0, 2($a1)
	subi $a0, $a0, 48
	add $s3, $s3, $a0	
	
	# Slytherin House?
	lb $a0, 3($a1)	
	subi $a0, $a0, 48
	add $s4, $s4, $a0
	
	# Returns to spot in function	
	jr $ra
	
exit:
	li $v0, 1
	move $a0, $s1
	syscall

	li $v0, 10
	syscall