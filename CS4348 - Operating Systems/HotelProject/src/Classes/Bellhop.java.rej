diff a/CS4348 - Operating Systems/HotelProject/src/Classes/Bellhop.java b/CS4348 - Operating Systems/HotelProject/src/Classes/Bellhop.java	(rejected hunks)
@@ -1,97 +1,59 @@
 package Classes;
 
-import Globals.HotelHelper;
+import interfaces.HotelHelper;
 
 import java.util.HashMap;
 import java.util.concurrent.Semaphore;
 
-/**
- * @semaphoreHashMap - Global HashMap shared by all classes
- * @bellhopGuestHashMap - Used to handle specific interactions between guests and bellhops
- * @mutex - Used to make sure guests obtain the correct bellhop
- * @toStringId, @guestNo, @beingUsed - Defining variables of the class
- */
 public class Bellhop extends Thread {
     private HashMap<String, Semaphore> semaphoreHashMap;
     private HashMap<String, Semaphore> bellhopGuestHashMap;
 
-    private Semaphore mutex;
-
     private String toStringId;
     private int guestNo;
-    private int bellhopNo;
+
+    private boolean beingUsed = false;
 
     private HotelHelper helper;
 
-    /**
-     * @param bellhopNo - The 'relative' bellhop number used in output
-     * @param helper    - Global helper function shared among all classes
-     * @throws InterruptedException - For semaphore.acquire()
-     */
-    public Bellhop(Integer bellhopNo, HotelHelper helper) throws InterruptedException {
+    public Bellhop(Integer bellhopNo, HotelHelper helper) {
         this.helper = helper;
-        this.mutex = new Semaphore(1, true);
-        this.mutex.acquire();
 
         this.semaphoreHashMap = helper.initializeSemaphoreHashMap();
         this.toStringId = "Bellhop " + bellhopNo + ": ";
-        this.bellhopNo = bellhopNo;
         this.guestNo = -1;
     }
 
-    public int getBellhopNo() {
-        return bellhopNo;
+    public boolean isUsed() {
+        return beingUsed;
+    }
+
+    public void setUsed(boolean beingUsed) {
+        this.beingUsed = beingUsed;
     }
 
-    /**
-     * @param bellhopGuestHashMap - Sets the bellhopGuestHashMap of this thread to that
-     *                            of whatever is passed into it
-     */
     public void setBellhopGuestHashMap(HashMap<String, Semaphore> bellhopGuestHashMap) {
         this.bellhopGuestHashMap = bellhopGuestHashMap;
     }
 
-    /**
-     * @param guestNo - A guest number used to give a guest number to output
-     */
     public void setGuestNo(Integer guestNo) {
         this.guestNo = guestNo;
     }
 
-    /**
-     * Acts as a mutex, handles interaction between classes so that the guests and
-     * clerks get assigned correctly. Used outside of this class.
-     */
-    public void triggerMutex() {
-        if (mutex.availablePermits() == 0) {
-            mutex.release();
-        } else {
-            try {
-                mutex.acquire();
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    /**
-     * Runs the thread, contains the main code for handling interactions between the objects.
-     */
     @Override
     public void run() {
         printStringToConsole(toStringId, "is ready to help a guest");
         while (this.isAlive()) {
             try {
-                this.semaphoreHashMap.get("lock").acquire();
+                this.semaphoreHashMap.get("bellhopVars").acquire();
+                this.beingUsed = false;
                 this.guestNo = -1;
                 this.bellhopGuestHashMap = null;
-                this.semaphoreHashMap.get("bellhops").release();
-                this.helper.addToBellhopQueue(this);
-                this.semaphoreHashMap.get("lock").release();
+                this.semaphoreHashMap.get("bellhopVars").release();
 
-                printStringToConsole(toStringId, "is ready to help a guest");
+                this.semaphoreHashMap.get("bellhops").release();
 
-                this.mutex.acquire();
+                this.semaphoreHashMap.get("bellhopSync").acquire();
 
                 printStringToConsole(toStringId, "has obtained the bags of [Guest ", guestNo + "", "]");
                 this.bellhopGuestHashMap.get("hasBags").release();
@@ -108,28 +70,20 @@
                 printStringToConsole(toStringId, "has gotten their tip and leaves from [Guest ", guestNo + "", "]");
 
                 this.bellhopGuestHashMap.get("gotTip").release();
+
+                printStringToConsole(toStringId, "is ready to help a guest");
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
         }
     }
 
-    /**
-     * @return - toString for debug use only
-     */
     @Override
     public String toString() {
-        return toStringId;
+        return toStringId + ", " + beingUsed;
     }
 
-    /**
-     * @param strings - Variable Strings as input, allows for multiple input
-     *                <p>
-     *                This function concats the strings in an output message and prints at the
-     *                same time using StringBuilder so that the async nature of String concat is
-     *                held.
-     */
-    private void printStringToConsole(String... strings) {
+    private void printStringToConsole(String ... strings) {
         StringBuilder sb = new StringBuilder();
         for (String s : strings) {
             sb.append(s);
