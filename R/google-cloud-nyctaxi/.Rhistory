glm.pred[glm.probs>.5] = "Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
cor(Smarket)
cor(Smarket[, -9])
summary(Smarket)
summary(Smarket)
pairs(Smarket)
dim(Smarket)
summary(Smarket)
summary(glm.fit)$coef
summary(glm.fit)
glm.fit = glm(Direction ~ Lag1 + Lag2,
data = Smarket,
family = binomial,
subset=train)
glm.probs = predict(glm.fit, Smarket.2005, type = "response")
glm.pred=rep("Down", 252)
glm.pred[glm.probs>.5] = "Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
predict(glm.fit, newdata=data.frame(Lag1=c(1.2,1.5), Lag2=c(1.1,-0.8)), type="response")
library(MASS)
lda.fit=lda(Direction~Lag1+Lag2, data=Smarket, subset=train)
lda.fit
lda.pred=predict(lda.fit, Smarket.2005)
names(lda.pred)
View(lda.pred)
View(lda.pred)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>= .5)
sum(lda.pred$posterior[,1] <.5)
lda.pred$posterior[1:20,1]
lda.class[1:20]
View(lda.fit)
View(lda.pred)
View(lda.fit)
qda.fit = qda(Direction ~ Lag1 + Lag2, data = Smaarket, subset = train)
qda.fit = qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
qda.fit
qda.class = predict(qda.fit, Smarket.2005)$class
table(qda.class, Direciton.2005)
table(qda.class, Direction.2005)
mean(qda.class==Direction.2005)
library(class)
train.X = cbind(Lag1, Lag2)[train,]
test.X = cbind(Lag1, Lage2)[!train,]
test.X = cbind(Lag1, Lag2)[!train,]
train.Direction = Direction[train]
set.seed(1)
knn.pred = knn(train.X, text.X, train.Direction, k=1)
knn.pred = knn(train.X, test.X, train.Direction, k=1)
table(knn.pred, Direction.2005)
knn.pred = knn(train.X, test.X, train.Direction, k=3)
table(knn.pred, Direction.2005)
(43+83)/252
(48+87)/252
dim(Caravan)
attach(Caravan)
summary(Purchase)
summary(Purchase)
summary(Purchase)
standardized.X = scale(Caravan[,-86])
var(Caravan[,1])
var(Caravan[,2])
var(standardized.X[,1])
var(standardized.X[,2])
test=1:1000
train.X=standardized.X[-test,]
test.x=standardized.X[test,]
train.Y=Purchase[-test]
test.Y=Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
test.x=standardized.X[test]
knn.pred = knn(train.X, test.X, train.Y, k=1)
train.X=standardized.X[-test,]
test.x=standardized.X[test.]
train.Y=Purchase[-test]
test.Y=Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
test=1:1000
train.X=standardized.X[-test,]
test.x=standardized.X[test,]
train.Y=Purchase[-test]
test.Y=Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
train.X=standardized.X[-test,]
test.X=standardized.X[test,]
train.Y=Purchase[-test]
test.Y=Purchase[test]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Y, k=1)
mean(test.Y!=knn.pred)
mean(test.Y!="No")
table(knn.pred,test.Y)
9/(68+9)
knn.pred = knn(train.X, test.X, train.Y, k=5)
table(knn.pred,test.Y)
knn.pred = knn(train.X, test.X, train.Y, k=12)
table(knn.pred,test.Y)
knn.pred = knn(train.X, test.X, train.Y, k=6)
table(knn.pred,test.Y)
knn.pred = knn(train.X, test.X, train.Y, k=5)
table(knn.pred,test.Y)
df = read.csv("train.csv")
df <- read.csv("train.csv")
df <- read.csv("train.csv")
library(readr)
df <- read.csv("train.csv")
library(readr)
Titanic_Train <- read_csv("Titanic/train.csv")
View(Titanic_Train)
summary(Titanic_Train)
library(naniar)
install.packages("naniar")
library(naniar)
summary(Titanic_Train)
vis_miss(Titanic_Train)
library(ggplot2)
df <- Titanic_Train
View(Titanic_Train)
View(Titanic_Train)
library(readr)
Titanic <- read_csv("Titanic/train.csv")
View(Titanic)
df <- Titanic
library(naniar)
library(ggplot2)
summary(Titanic_Train)
vis_miss(df)
summmary(df)
summary(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
vis_miss(df)
df <- Titanic
vis_miss(df)
summary(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df$Cabin <- df[-$Cabin]
df$Cabin <- df[-Cabin]
df$Cabin <- df[-'Cabin']
df$Cabin <- df[-c(Cabin]
df$Cabin <- df[-c(Cabin)]
Cabin
df$Cabin <- df[-c("Cabin")]
df = df[.-Cabin]
df = df[,-Cabin]
df = df[,-$Cabin]
df = df[.-$Cabin]
df = df[-c(10)]
vis_miss(df)
df = df[-c(10)]
vis_miss(df)
vis_miss(df)
df = df[-c(10)]
vis_miss(df)
df <- Titanic
vis_miss(df)
summary(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(10)]
vis_miss(df)
df <- Titanic
vis_miss(df)
summary(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
summary(df)
View(df)
set.seed(101)
library(caTools)
library(naniar)
# install.packages("naniar")
install.packages("caTools")
library(caTools)
set.seed(101)
sample = sample.split(data$anycolumn, SplitRatio = .75)
sample = sample.split(df$Survived, SplitRatio = .75)
sample = sample.split(df, SplitRatio = .75)
sample = sample.split(df, SplitRatio = .75)
sample = sample.split(df, SplitRatio = .75)
sample = sample.split(df, SplitRatio = .75)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
summary(df)
View(df)
set.seed(101)
sample = sample.split(df, SplitRatio = .75)
train = subset(data, sample == TRUE)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
print(sample)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
set.seed(101)
sample = sample.split(df, SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
sample = sample.split(df, SplitRatio = 0.75)
train = subset(df, sample == TRUE)
library(caTools)
library(naniar)
library(ggplot2)
library(caTools)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
set.seed(101)
sample = sample.split(df, SplitRatio = 0.75)
require(caTools)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
set.seed(101)
sample = sample.split(df, SplitRatio = 0.75)
sample = sample.split(df, SplitRatio = 0.75)
train.index = sample(1:nrow(df), 0.8 * nrow(df))
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
train.index = sample(1:nrow(df), 0.8 * nrow(df))
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
df <- Titanic
library(readr)
Titanic <- read_csv("Titanic/train.csv")
View(Titanic)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
test.index <- setdiff(1:nrow(dr), train.index)
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index,]
# Build Variables
X_train <- df[train.index,]
library(naniar)
library(ggplot2)
require(caTools)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1,11)]
vis_miss(df)
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
# Build Variables
X_train <- df[train.index, -2]
# Build Variables
X_train <- df[train.index,]
# Build Variables
X_train <- df[train.index,-1]
# Build Variables
X_train <- df[train.index,]
y_test <- df[test.index, 'Survived']
X_test <- df[test.index, -1]
y_train <- df[train.index, 'Survived']
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index, -1]
y_train <- df[train.index, 'Survived']
X_test <- df[test.index, -1]
y_test <- df[test.index, 'Survived']
library(dummies)
# install.packages("naniar")
# install.packages("caTools")
install.packages("dummies")
library(dummies)
library(naniar)
library(ggplot2)
library(dummies)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
library(readr)
Titanic <- read_csv("Titanic/train.csv")
View(Titanic)
library(naniar)
library(ggplot2)
library(dummies)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
View(Titanic)
View(df)
# Build Variables
X_train <- df[train.index, c(-1,-4,-9, -12)]
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
View(df)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, sep=":"))
View(df)
# Build Variables
X_train <- df[train.index, c(-1,-3,-4,-7,-9)]
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, sep=":"))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index, c(-1,-3,-4,-7,-9)]
y_train <- df[train.index, 'Survived']
X_test <- df[test.index, c(-1,-3,-4,-7,-9)]
y_test <- df[test.index, 'Survived']
load("~/R/google-cloud-nyctaxi/env.RDataTmp")
# Package Installs ====
install.packages('geosphere')
install.packages('snow')
install.packages('doParallel')
# Library Setup ====
library(data.table)
library(geosphere)
library(parallel)
library(doParallel)
# Library Setup ====
library(data.table)
library(geosphere)
library(parallel)
library(doParallel)
# Utility Setup ====
setwd("~/R/google-cloud-nyctaxi")
cores <- detectCores()
cluster <- makePSOCKcluster(cores)
print(paste(c('Total Avaliable Cores: ', cores), collapse = " "))
# Function Setup ====
CombineDataFrames <- function(dt1, dt2) {
dt2$fare_amount = rep(0,9914)
dt3 = rbindlist(list(dt1,dt2), use.names = TRUE)
remove(dt1, dt2)
return(dt3)
}
ComputeLinearDistanceBetweenPoints <- function(rowVal) {
lo1 = rowVal[3]
la1 = rowVal[4]
lo2 = rowVal[5]
la2 = rowVal[6]
c1 = c(lo1, la1)
c2 = c(lo2, la2)
val <- geosphere::distGeo(c1, c2)
remove(lo1, la1, lo2, la2 ,c1, c2, rowVal)
return(val)
}
ComputeTimeSinceDayStartSec <- function(time.day) {
time.array <- unlist(strsplit(time.day, ":"))
val <- (as.numeric(time.array[1])*24*60) + (as.numeric(time.array[2])*60) + (as.numeric(time.array[3]))
remove(time.array)
return(val)
}
ConvertDateToOneNumeric <- function(date.day) {
date.array <- unlist(strsplit(date.day, "-"))
val <- as.numeric(paste(date.array[1],date.array[2],date.array[3], sep=''))
remove(date.array)
return(val)
}
RemoveBadLongLatData <- function(dt.temp) {
long_min = -75
long_max = -73
lat_min = 40
lat_max = 41.5
dt.temp <- dt.temp[dt.temp$dropoff_latitude <= lat_max]
dt.temp <- dt.temp[dt.temp$dropoff_longitude <= long_max]
dt.temp <- dt.temp[dt.temp$pickup_latitude <= lat_max]
dt.temp <- dt.temp[dt.temp$pickup_longitude <= long_max]
dt.temp <- dt.temp[dt.temp$dropoff_latitude >= lat_min]
dt.temp <- dt.temp[dt.temp$dropoff_longitude >= long_min]
dt.temp <- dt.temp[dt.temp$pickup_latitude >= lat_min]
dt.temp <- dt.temp[dt.temp$pickup_longitude >= long_min]
return(dt.temp)
}
CreateTimeCOl <- function(dt.temp) {
data <- substr(dt.temp$key, 12, 19)
col <- c()
for(time in data) {
val <- ComputeTimeSinceDayStartSec(time)
col <- c(col, val)
}
remove(data, dt.temp, val, time)
return(col)
stopCluster(cluster)
}
CreateDateCol <- function(dt.temp) {
data <- substr(dt.temp$key, 0, 10)
col <- c()
for(date in data) {
val <- ConvertDateToOneNumeric(date)
col <- c(col, val)
}
remove(data, dt.temp, val, date)
return(col)
}
# Loading Data ====
# train: 1:55423856
# test: 55423857:55433770
dt <- CombineDataFrames(fread('train.csv', header = T, sep = ',', nThread = 10, nrows = 39656),
fread('test.csv', header = T, sep = ',', nThread = 10))
# Add time column
dt$time.day <- CreateTimeCOl(dt)
# Add date column
dt$time.date <- CreateDateCol(dt)
# Remove NA Values : TEST HAS NO NA VALUES
dt <- subset(dt, select = -c(key))
dt[dt$fare_amount < 2.5] = NA
dt[dt$passenger_count <= 0] = NA
dt <- na.omit(dt, cols = c('dropoff_longitude', 'dropoff_latitude', 'fare_amount', 'passenger_count'))
dt <- RemoveBadLongLatData(dt)
# Add col corresponding to linear geographic distance between long / lat points
dt$geo_dist <- parRapply(cluster, dt, ComputeLinearDistanceBetweenPoints)
dt[dt$geo_dist == 0] = NA
dt <- na.omit(dt, cols = c('geo_dist'))
# Random Sampling
train.index <- sample(1:nrow(dt), 0.70 * nrow(dt))
test.index <- setdiff(1:nrow(dt), train.index)
set.seed(101)
dt.train <- dt[train.index, c(-2,-3,-4,-5,-6)]
dt.test <- dt[test.index, c(-2,-3,-4,-5,-6)]
lm.fit <- lm(fare_amount ~ time.date + geo_dist, data = dt.train)
summary(lm.fit)
lm.probs = predict(lm.fit, newdata = dt.test)
lm.probs <- round(lm.probs, 2)
sqrt(mean((dt.test$fare_amount- lm.probs)^2))
