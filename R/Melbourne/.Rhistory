vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
set.seed(101)
sample = sample.split(df, SplitRatio = 0.75)
require(caTools)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
set.seed(101)
sample = sample.split(df, SplitRatio = 0.75)
sample = sample.split(df, SplitRatio = 0.75)
train.index = sample(1:nrow(df), 0.8 * nrow(df))
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
train.index = sample(1:nrow(df), 0.8 * nrow(df))
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
df <- Titanic
library(readr)
Titanic <- read_csv("Titanic/train.csv")
View(Titanic)
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(11)]
vis_miss(df)
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
test.index <- setdiff(1:nrow(dr), train.index)
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index,]
# Build Variables
X_train <- df[train.index,]
library(naniar)
library(ggplot2)
require(caTools)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1,11)]
vis_miss(df)
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.8 * nrow(df))
# Build Variables
X_train <- df[train.index, -2]
# Build Variables
X_train <- df[train.index,]
# Build Variables
X_train <- df[train.index,-1]
# Build Variables
X_train <- df[train.index,]
y_test <- df[test.index, 'Survived']
X_test <- df[test.index, -1]
y_train <- df[train.index, 'Survived']
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index, -1]
y_train <- df[train.index, 'Survived']
X_test <- df[test.index, -1]
y_test <- df[test.index, 'Survived']
library(dummies)
# install.packages("naniar")
# install.packages("caTools")
install.packages("dummies")
library(dummies)
library(naniar)
library(ggplot2)
library(dummies)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
library(readr)
Titanic <- read_csv("Titanic/train.csv")
View(Titanic)
library(naniar)
library(ggplot2)
library(dummies)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
View(Titanic)
View(df)
# Build Variables
X_train <- df[train.index, c(-1,-4,-9, -12)]
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
View(df)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, drop=TRUE))
View(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, sep=":"))
View(df)
# Build Variables
X_train <- df[train.index, c(-1,-3,-4,-7,-9)]
# Data Cleanup
df <- Titanic
vis_miss(df)
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = TRUE)
vis_miss(df)
df = df[-c(1, 11)]
vis_miss(df)
# Creating Dummy Variables
df <- cbind(df, dummy(df$Sex, sep=":"))
# Random Sample Indicies
train.index <- sample(1:nrow(df), 0.70 * nrow(df))
test.index <- setdiff(1:nrow(df), train.index)
# Build Variables
X_train <- df[train.index, c(-1,-3,-4,-7,-9)]
y_train <- df[train.index, 'Survived']
X_test <- df[test.index, c(-1,-3,-4,-7,-9)]
y_test <- df[test.index, 'Survived']
load("~/R/google-cloud-nyctaxi/env.RDataTmp")
library(naniar)
library(data.table)
library(glmnet)
library(readr)
library(Metrics)
library(tidyr)
library(fastDummies)
library(naniar)
library(data.table)
library(glmnet)
library(readr)
library(Metrics)
library(tidyr)
library(fastDummies)
# Utility Setup ====
setwd("~/R/Melbourne")
Mode <- function(x) {
ux <- na.omit(unique(x) )
tab <- tabulate(match(x, ux)); ux[tab == max(tab) ]
}
# Loading Data ====
dt.train <- read_csv('train.csv')
dt.train <- data.frame(dt.train)
dt.test <- read_csv('test.csv')
dt.test$SalePrice = rep(0,length(dt.test$Id))
dt.test <- data.frame(dt.test)
#dt = rbindlist(list(dt.train, dt.test), use.names = TRUE)
dt = dt.train
#dt = dt.test
dt <- data.frame(dt)
# Feature Engineering
dt[,c("Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu", "BsmtUnfSF", "MisFeature", "MiscVal")] <- NULL
dt$MasVnrType <- tidyr::replace_na(dt$MasVnrType, "NM")
dt$BsmtQual <- tidyr::replace_na(dt$BsmtQual, "NB")
dt$BsmtCond <- tidyr::replace_na(dt$BsmtCond, "NB")
dt$BsmtExposure <- tidyr::replace_na(dt$BsmtExposure, "NB")
dt$BsmtFinType1 <- tidyr::replace_na(dt$BsmtFinType1, "NB")
dt$BsmtFinType2 <- tidyr::replace_na(dt$BsmtFinType2, "NB")
dt[dt$BsmtQual == "NB", "BsmtFinSF1"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFinSF2"] <- 0
dt[dt$BsmtQual == "NB", "BsmtHalfBath"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFullBath"] <- 0
# Need to NOT HARDCODE these index values...
dt[949, "BsmtExposure"] <- Mode(dt$BsmtExposure)
dt[333, "BsmtFinType2"] <- Mode(dt$BsmtFinType2)
for(title in colnames(dt[, names(dt) != 'SalePrice'])) {
if(sum(is.na(dt[, title])) > 0) {
if(is.numeric(dt[, title])) {
dt[is.na(dt[,title]), title] <- mean(as.numeric(dt[,title]), na.rm=TRUE)
} else {
dt[is.na(dt[,title]), title] <- Mode(dt[,title])
}
}
}
remove(title)
dt[dt$MasVnrArea == 0, "MasVnrType"] <- "NM"
dt[dt$MasVnrType == "NM", "MasVnrArea"] <- 0
# Note, can do more engineering here:
#   Such as comparing to other dates inside the dataset instead
#   of just imputing a mean value.
dt[dt$GarageYrBlt < 1950 | dt$GarageYrBlt > 2010, "GarageYrBlt"] <- mean(as.numeric(dt[dt$GarageYrBlt >= 1950 & dt$GarageYrBlt <= 2010, "GarageYrBlt"]), na.rm=TRUE)
dt[dt$YrSold < 1950 | dt$YrSold > 2010, "YrSold"] <- mean(as.numeric(dt[dt$YrSold >= 1950 & dt$YrSold <= 2010, "YrSold"]), na.rm=TRUE)
dt[dt$YearBuilt < 1950 | dt$YearBuilt > 2010, "YearBuilt"] <- mean(as.numeric(dt[dt$YearBuilt >= 1950 & dt$YearBuilt <= 2010, "YearBuilt"]), na.rm=TRUE)
dt[dt$YearRemodAdd < 1950 | dt$YearRemodAdd > 2010, "YearRemodAdd"] <- mean(as.numeric(dt[dt$YearRemodAdd >= 1950 & dt$YearRemodAdd <= 2010, "YearRemodAdd"]), na.rm=TRUE)
dt[dt$MoSold < 0 | dt$MoSold > 12, "MoSold"] <- mean(as.numeric(dt[dt$MoSold >= 0 & dt$MoSold <= 12, "MoSold"]), na.rm=TRUE)
vis_miss(dt)
dt$LotArea
dt <- scale(dt)
#dt = rbindlist(list(dt.train, dt.test), use.names = TRUE)
dt = dt.train
#dt = dt.test
dt <- data.frame(dt)
vis_miss(dt)
#dt = dt.test
dt <- data.frame(dt)
# Feature Engineering
dt[,c("Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu", "BsmtUnfSF", "MisFeature", "MiscVal")] <- NULL
dt$MasVnrType <- tidyr::replace_na(dt$MasVnrType, "NM")
dt$BsmtQual <- tidyr::replace_na(dt$BsmtQual, "NB")
dt$BsmtCond <- tidyr::replace_na(dt$BsmtCond, "NB")
dt$BsmtExposure <- tidyr::replace_na(dt$BsmtExposure, "NB")
dt$BsmtFinType1 <- tidyr::replace_na(dt$BsmtFinType1, "NB")
dt$BsmtFinType2 <- tidyr::replace_na(dt$BsmtFinType2, "NB")
dt[dt$BsmtQual == "NB", "BsmtFinSF1"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFinSF2"] <- 0
dt[dt$BsmtQual == "NB", "BsmtHalfBath"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFullBath"] <- 0
# Need to NOT HARDCODE these index values...
dt[949, "BsmtExposure"] <- Mode(dt$BsmtExposure)
dt[333, "BsmtFinType2"] <- Mode(dt$BsmtFinType2)
for(title in colnames(dt[, names(dt) != 'SalePrice'])) {
if(sum(is.na(dt[, title])) > 0) {
if(is.numeric(dt[, title])) {
dt[is.na(dt[,title]), title] <- mean(as.numeric(dt[,title]), na.rm=TRUE)
} else {
dt[is.na(dt[,title]), title] <- Mode(dt[,title])
}
}
}
remove(title)
dt[dt$MasVnrArea == 0, "MasVnrType"] <- "NM"
dt[dt$MasVnrType == "NM", "MasVnrArea"] <- 0
# Note, can do more engineering here:
#   Such as comparing to other dates inside the dataset instead
#   of just imputing a mean value.
dt[dt$GarageYrBlt < 1950 | dt$GarageYrBlt > 2010, "GarageYrBlt"] <- mean(as.numeric(dt[dt$GarageYrBlt >= 1950 & dt$GarageYrBlt <= 2010, "GarageYrBlt"]), na.rm=TRUE)
dt[dt$YrSold < 1950 | dt$YrSold > 2010, "YrSold"] <- mean(as.numeric(dt[dt$YrSold >= 1950 & dt$YrSold <= 2010, "YrSold"]), na.rm=TRUE)
dt[dt$YearBuilt < 1950 | dt$YearBuilt > 2010, "YearBuilt"] <- mean(as.numeric(dt[dt$YearBuilt >= 1950 & dt$YearBuilt <= 2010, "YearBuilt"]), na.rm=TRUE)
dt[dt$YearRemodAdd < 1950 | dt$YearRemodAdd > 2010, "YearRemodAdd"] <- mean(as.numeric(dt[dt$YearRemodAdd >= 1950 & dt$YearRemodAdd <= 2010, "YearRemodAdd"]), na.rm=TRUE)
dt[dt$MoSold < 0 | dt$MoSold > 12, "MoSold"] <- mean(as.numeric(dt[dt$MoSold >= 0 & dt$MoSold <= 12, "MoSold"]), na.rm=TRUE)
vis_miss(dt)
col_numeric = c()
col_cat = c()
for(name in colnames(dt)) {
if(is.numeric(dt[1, name])) {
col_numeric <- c(col_numeric, name)
} else {
col_cat <- c(col_cat, name)
}
}
# Feature Engineering
dt[,c("Id", "Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu", "BsmtUnfSF", "MisFeature", "MiscVal")] <- NULL
for(name in colnames(dt)) {
if(is.numeric(dt[1, name])) {
col_numeric <- c(col_numeric, name)
} else {
col_cat <- c(col_cat, name)
}
}
col_numeric = c()
col_cat = c()
for(name in colnames(dt)) {
if(is.numeric(dt[1, name])) {
col_numeric <- c(col_numeric, name)
} else {
col_cat <- c(col_cat, name)
}
}
dt[,col_numeric] <- scale(dt[,col_numeric])
dt$LotArea
dt <- dummy_cols(dt)
# Feature Selection ====
x = model.matrix(SalePrice~., dt)[,-1]
y = dt$SalePrice
set.seed(1)
#train = array(1:(length(dt.train$Id) + length(dt.test$Id)))
#train[1:length(dt.train$Id)] = TRUE
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
# Cross validaiton Lasso Lambda
cv.out = cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam= cv.out$lambda.min
# Lasso Model Prediction  / Testing
lasso.mod = glmnet(x[train,], y[train], alpha=1)
lasso.pred = predict(lasso.mod, s=bestlam, newx=x[test,])
rmse(y.test, lasso.pred)
library(naniar)
library(data.table)
library(glmnet)
library(readr)
library(Metrics)
library(tidyr)
library(fastDummies)
# Utility Setup ====
setwd("~/R/Melbourne")
Mode <- function(x) {
ux <- na.omit(unique(x) )
tab <- tabulate(match(x, ux)); ux[tab == max(tab) ]
}
# Loading Data ====
dt.train <- read_csv('train.csv')
dt.train <- data.frame(dt.train)
dt.test <- read_csv('test.csv')
dt.test$SalePrice = rep(0,length(dt.test$Id))
dt.test <- data.frame(dt.test)
dt = rbindlist(list(dt.train, dt.test), use.names = TRUE)
#dt = dt.train
#dt = dt.test
dt <- data.frame(dt)
# Feature Engineering
dt[,c("Id", "Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu", "BsmtUnfSF", "MisFeature", "MiscVal")] <- NULL
dt$MasVnrType <- tidyr::replace_na(dt$MasVnrType, "NM")
dt$BsmtQual <- tidyr::replace_na(dt$BsmtQual, "NB")
dt$BsmtCond <- tidyr::replace_na(dt$BsmtCond, "NB")
dt$BsmtExposure <- tidyr::replace_na(dt$BsmtExposure, "NB")
dt$BsmtFinType1 <- tidyr::replace_na(dt$BsmtFinType1, "NB")
dt$BsmtFinType2 <- tidyr::replace_na(dt$BsmtFinType2, "NB")
dt[dt$BsmtQual == "NB", "BsmtFinSF1"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFinSF2"] <- 0
dt[dt$BsmtQual == "NB", "BsmtHalfBath"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFullBath"] <- 0
# Need to NOT HARDCODE these index values...
dt[949, "BsmtExposure"] <- Mode(dt$BsmtExposure)
dt[333, "BsmtFinType2"] <- Mode(dt$BsmtFinType2)
for(title in colnames(dt[, names(dt) != 'SalePrice'])) {
if(sum(is.na(dt[, title])) > 0) {
if(is.numeric(dt[, title])) {
dt[is.na(dt[,title]), title] <- mean(as.numeric(dt[,title]), na.rm=TRUE)
} else {
dt[is.na(dt[,title]), title] <- Mode(dt[,title])
}
}
}
remove(title)
dt[dt$MasVnrArea == 0, "MasVnrType"] <- "NM"
dt[dt$MasVnrType == "NM", "MasVnrArea"] <- 0
# Note, can do more engineering here:
#   Such as comparing to other dates inside the dataset instead
#   of just imputing a mean value.
dt[dt$GarageYrBlt < 1950 | dt$GarageYrBlt > 2010, "GarageYrBlt"] <- mean(as.numeric(dt[dt$GarageYrBlt >= 1950 & dt$GarageYrBlt <= 2010, "GarageYrBlt"]), na.rm=TRUE)
dt[dt$YrSold < 1950 | dt$YrSold > 2010, "YrSold"] <- mean(as.numeric(dt[dt$YrSold >= 1950 & dt$YrSold <= 2010, "YrSold"]), na.rm=TRUE)
dt[dt$YearBuilt < 1950 | dt$YearBuilt > 2010, "YearBuilt"] <- mean(as.numeric(dt[dt$YearBuilt >= 1950 & dt$YearBuilt <= 2010, "YearBuilt"]), na.rm=TRUE)
dt[dt$YearRemodAdd < 1950 | dt$YearRemodAdd > 2010, "YearRemodAdd"] <- mean(as.numeric(dt[dt$YearRemodAdd >= 1950 & dt$YearRemodAdd <= 2010, "YearRemodAdd"]), na.rm=TRUE)
dt[dt$MoSold < 0 | dt$MoSold > 12, "MoSold"] <- mean(as.numeric(dt[dt$MoSold >= 0 & dt$MoSold <= 12, "MoSold"]), na.rm=TRUE)
vis_miss(dt)
col_numeric = c()
col_cat = c()
for(name in colnames(dt)) {
if(is.numeric(dt[1, name])) {
col_numeric <- c(col_numeric, name)
} else {
col_cat <- c(col_cat, name)
}
}
dt[,col_numeric] <- scale(dt[,col_numeric])
#dt$LotArea
dt <- dummy_cols(dt)
# Feature Selection ====
x = model.matrix(SalePrice~., dt)[,-1]
y = dt$SalePrice
set.seed(1)
train = array(1:(length(dt.train$Id) + length(dt.test$Id)))
train[1:length(dt.train$Id)] = TRUE
#train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
# Cross validaiton Lasso Lambda
cv.out = cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam= cv.out$lambda.min
# Lasso Model Prediction  / Testing
lasso.mod = glmnet(x[train,], y[train], alpha=1)
lasso.pred = predict(lasso.mod, s=bestlam, newx=x[test,])
# File Output
dt.out <- as.data.frame(unscale(lasso.pred))
install.packages("DMwR")
library(DMwR)
# File Output
dt.out <- as.data.frame(unscale(lasso.pred))
# File Output
dt.out <- as.data.frame(unscale(lasso.pred, dt))
lasso.pred
library(naniar)
library(data.table)
library(glmnet)
library(readr)
library(Metrics)
library(tidyr)
library(fastDummies)
# Utility Setup ====
setwd("~/R/Melbourne")
Mode <- function(x) {
ux <- na.omit(unique(x) )
tab <- tabulate(match(x, ux)); ux[tab == max(tab) ]
}
# Loading Data ====
dt.train <- read_csv('train.csv')
dt.train <- data.frame(dt.train)
dt.test <- read_csv('test.csv')
dt.test$SalePrice = rep(0,length(dt.test$Id))
dt.test <- data.frame(dt.test)
dt = rbindlist(list(dt.train, dt.test), use.names = TRUE)
#dt = dt.train
#dt = dt.test
dt <- data.frame(dt)
# Feature Engineering
dt[,c("Id", "Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu", "BsmtUnfSF", "MisFeature", "MiscVal")] <- NULL
dt$MasVnrType <- tidyr::replace_na(dt$MasVnrType, "NM")
dt$BsmtQual <- tidyr::replace_na(dt$BsmtQual, "NB")
dt$BsmtCond <- tidyr::replace_na(dt$BsmtCond, "NB")
dt$BsmtExposure <- tidyr::replace_na(dt$BsmtExposure, "NB")
dt$BsmtFinType1 <- tidyr::replace_na(dt$BsmtFinType1, "NB")
dt$BsmtFinType2 <- tidyr::replace_na(dt$BsmtFinType2, "NB")
dt[dt$BsmtQual == "NB", "BsmtFinSF1"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFinSF2"] <- 0
dt[dt$BsmtQual == "NB", "BsmtHalfBath"] <- 0
dt[dt$BsmtQual == "NB", "BsmtFullBath"] <- 0
# Need to NOT HARDCODE these index values...
dt[949, "BsmtExposure"] <- Mode(dt$BsmtExposure)
dt[333, "BsmtFinType2"] <- Mode(dt$BsmtFinType2)
for(title in colnames(dt[, names(dt) != 'SalePrice'])) {
if(sum(is.na(dt[, title])) > 0) {
if(is.numeric(dt[, title])) {
dt[is.na(dt[,title]), title] <- mean(as.numeric(dt[,title]), na.rm=TRUE)
} else {
dt[is.na(dt[,title]), title] <- Mode(dt[,title])
}
}
}
remove(title)
dt[dt$MasVnrArea == 0, "MasVnrType"] <- "NM"
dt[dt$MasVnrType == "NM", "MasVnrArea"] <- 0
# Note, can do more engineering here:
#   Such as comparing to other dates inside the dataset instead
#   of just imputing a mean value.
dt[dt$GarageYrBlt < 1950 | dt$GarageYrBlt > 2010, "GarageYrBlt"] <- mean(as.numeric(dt[dt$GarageYrBlt >= 1950 & dt$GarageYrBlt <= 2010, "GarageYrBlt"]), na.rm=TRUE)
dt[dt$YrSold < 1950 | dt$YrSold > 2010, "YrSold"] <- mean(as.numeric(dt[dt$YrSold >= 1950 & dt$YrSold <= 2010, "YrSold"]), na.rm=TRUE)
dt[dt$YearBuilt < 1950 | dt$YearBuilt > 2010, "YearBuilt"] <- mean(as.numeric(dt[dt$YearBuilt >= 1950 & dt$YearBuilt <= 2010, "YearBuilt"]), na.rm=TRUE)
dt[dt$YearRemodAdd < 1950 | dt$YearRemodAdd > 2010, "YearRemodAdd"] <- mean(as.numeric(dt[dt$YearRemodAdd >= 1950 & dt$YearRemodAdd <= 2010, "YearRemodAdd"]), na.rm=TRUE)
dt[dt$MoSold < 0 | dt$MoSold > 12, "MoSold"] <- mean(as.numeric(dt[dt$MoSold >= 0 & dt$MoSold <= 12, "MoSold"]), na.rm=TRUE)
vis_miss(dt)
col_numeric = c()
col_cat = c()
for(name in colnames(dt)) {
if(is.numeric(dt[1, name]) && name != "SalePrice") {
col_numeric <- c(col_numeric, name)
} else {
col_cat <- c(col_cat, name)
}
}
dt[,col_numeric] <- scale(dt[,col_numeric])
dt <- dummy_cols(dt)
# Feature Selection ====
x = model.matrix(SalePrice~., dt)[,-1]
y = dt$SalePrice
set.seed(1)
train = array(1:(length(dt.train$Id) + length(dt.test$Id)))
train[1:length(dt.train$Id)] = TRUE
#train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
# Cross validaiton Lasso Lambda
cv.out = cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam= cv.out$lambda.min
# Lasso Model Prediction  / Testing
lasso.mod = glmnet(x[train,], y[train], alpha=1)
lasso.pred = predict(lasso.mod, s=bestlam, newx=x[test,])
